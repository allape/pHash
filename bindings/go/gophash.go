/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: gophash.i

package gophash

/*
#cgo LDFLAGS: -L/usr/local/lib -lpHash

#define intgo swig_intgo
typedef void *swig_voidp;

#include <stdint.h>


typedef int intgo;
typedef unsigned int uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;


typedef _gostring_ swig_type_1;
typedef _goslice_ swig_type_2;
extern void _wrap_Swig_free_gophash_581a55df942623fd(uintptr_t arg1);
extern uintptr_t _wrap_Swig_malloc_gophash_581a55df942623fd(swig_intgo arg1);
extern swig_intgo _wrap_goPhMhImageHash_gophash_581a55df942623fd(swig_intgo arg1, swig_intgo arg2, swig_type_1 arg3, swig_type_2 arg4);
#undef intgo
*/
import "C"

import "unsafe"
import _ "runtime/cgo"
import "sync"
import "errors"
import "encoding/hex"

type _ unsafe.Pointer

var Swig_escape_always_false bool
var Swig_escape_val interface{}

type _swig_fnptr *byte
type _swig_memberptr *byte

type _ sync.Mutex

func Swig_free(arg1 uintptr) {
	_swig_i_0 := arg1
	C._wrap_Swig_free_gophash_581a55df942623fd(C.uintptr_t(_swig_i_0))
}

func Swig_malloc(arg1 int) (_swig_ret uintptr) {
	var swig_r uintptr
	_swig_i_0 := arg1
	swig_r = (uintptr)(C._wrap_Swig_malloc_gophash_581a55df942623fd(C.swig_intgo(_swig_i_0)))
	return swig_r
}

func GoPhMhImageHash(arg1 int, arg2 int, arg3 string, arg4 []byte) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (int)(C._wrap_goPhMhImageHash_gophash_581a55df942623fd(C.swig_intgo(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_1)(unsafe.Pointer(&_swig_i_2)), *(*C.swig_type_2)(unsafe.Pointer(&_swig_i_3))))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg4
	}
	return swig_r
}

func ImageHashString(alpha, level int, image string) (string, error) {
	hash := make([]byte, 256)
	result := GoPhMhImageHash(alpha, level, image, hash)
	if len(hash) < 1 || result != 0 {
		return "", errors.New("Not a valid hash wrapper array")
	}
	hashLength := int(hash[0])
	if hashLength < 1 {
		return "", errors.New("Not a valid hash array")
	}
	return hex.EncodeToString(hash[1 : hashLength+1]), nil
}

func phBitCount8(val byte) int {
	num := 0
	for val != 0 {
		num += 1
		val &= val - 1
	}
	return num
}

func PhHammingDistance(hash1, hash2 []byte) float64 {
	lenA := len(hash1)
	if lenA != len(hash2) {
		return -1.0
	}
	dist := float64(0)
	D := byte(0)
	for i, b := range hash1 {
		D = hash2[i] ^ b
		dist += float64(phBitCount8(D))
	}
	bits := float64(lenA * 8)
	return dist / bits
}

func HexStringPhHammingDistance(hash1, hash2 string) (float64, error) {
	hashByteArr1, err := hex.DecodeString(hash1)
	if err != nil {
		return 0, err
	}
	hashByteArr2, err := hex.DecodeString(hash2)
	if err != nil {
		return 0, err
	}
	return PhHammingDistance(hashByteArr1, hashByteArr2), nil
}
